package com.seanatives.SurfCoursePlanner.services;

// Generated by Selenium IDE


import com.seanatives.SurfCoursePlanner.domain.Booking;
import com.seanatives.SurfCoursePlanner.domain.CsvBooking;
import com.seanatives.SurfCoursePlanner.domain.Guest;
import com.seanatives.SurfCoursePlanner.repository.GuestRepository;
import org.openqa.selenium.*;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static java.lang.String.format;
import static java.time.Duration.ofSeconds;

@Service
public class SeleniumScraperService {
    // Ersetzen Sie dies durch den Pfad zu Ihrer Datei
    public static final String FILE_PATH = System.getProperty("java.io.tmpdir");

    public static final String BOOKINGLAYER_BOOKINGS = "Bookinglayer-Bookings";
    private WebDriver driver;
    private Map<String, Object> vars;
    JavascriptExecutor js;

    @Value("${bookinglayer.email}")
    private String bookingLayerLoginEmail;
    @Value("${bookinglayer.password}")
    private String bookingLayerLoginPassword;

    @Autowired
    private BookingParserService bookingParserService;

    @Autowired
    private CSVFileWatcherService CSVFileWatcherService;
    @Autowired
    private SimpMessagingTemplate messagingTemplate;
    @Autowired
    private GuestParserService guestParserService;
    @Autowired
    private GuestRepository guestRepository;

    public List<CsvBooking> scrapeAllBookings() throws Exception {
        setUp();
        Path bookingsCsv = loginAndDownload();
        tearDown();
        return bookingParserService.parseBookings(bookingsCsv);
    }

    public List<Guest> scrapeGuestsFor(List<Booking> bookings) {
        setUp();
        List<Guest> guests = new ArrayList<>();
        bookings.forEach(booking -> guests.addAll(scrapeParticipantsForBooking(booking)));
        driver.close();

        messagingTemplate.convertAndSend("/topic/logs", format("scraping done"));
        log(format("scraped %d guests", guests.size()));
        return guests;
    }

    private List<Guest> scrapeParticipantsForBooking(Booking booking) {
        messagingTemplate.convertAndSend("/topic/logs",
                format("Scrape %s %s %s", booking.getBookerFirstName(), booking.getBookerLastName(), booking.getBookingId()));
        List<Guest> guests = new ArrayList<>();
        System.out.println(format("scrape booking: %s for booker %s", booking.getBookingId(), booking.getBookerFirstName()));
        driver.get(format("https://app.bookinglayer.io/orders/%s", booking.getBookingId()));
        loginIfNeeded();
        waitForAndGetWebElement(By.id("OrderPaxLabel"), 10).getText();
        driver.findElements(By.cssSelector(".guestElement"))
                .forEach(guestElement -> {

                    // Todo: check if the guest has been canceled
                    String guestName = waitForAndGetWebElement(guestElement, By.cssSelector(".guestElementName"), 10).getText();;
                    String dataId = guestElement.getAttribute("data-id");

                    log(format("Scrape %s with data-id: %s", guestName, dataId));

                    Guest guest = findOrCreateGuest(booking, guestName, dataId);
                    guests.add(guest);

                    String guestAge = findElementIfExists(guestElement, By.cssSelector(".ml-3.text-muted"));
                    guest.setAge(guestAge);

                    String bookingDetails = findElementIfExists(guestElement, By.cssSelector(".guestItineraryTable"));
                    guest.setBookingDetails(bookingDetails);

                    WebElement guestNameButton = waitForAndGetWebElement(guestElement,
                            By.cssSelector(".client"), 10);
                    waitForElementToBeClickableAndClick(guestNameButton, 10);

                    String level = scrapeSurfLevelFromModal();
                    guest.setSurfLevel(level);
                    log("Level: " + level);

                    guestParserService.parseGuest(guest);
                    System.out.println(guest);

                    guestRepository.save(guest);


                });
        messagingTemplate.convertAndSend("/topic/logs",
                format("Found %d guests for that booking", guests.size()));
        return guests;
    }

    private void log(String message) {
        messagingTemplate.convertAndSend("/topic/logs", message);
        System.out.println(message);
    }

    private Guest findOrCreateGuest(Booking booking, String guestName, String dataId) {
        Guest guest;

        Optional<Guest> guestOptional = guestRepository.findByDataId(dataId);
        if (guestOptional.isEmpty()) {
            guest = new Guest();
            guest.setBooking(booking);
            guest.setName(guestName);
            guest.setDataId(dataId);
        } else {
            guest = guestOptional.get();
        }
        return guest;
    }

    private String scrapeSurfLevelFromModal() {
        WebElement guestModalWindow = waitForAndGetWebElement(By.cssSelector(".modal-dialog"), 10);

        //Parse SurfLevel
        WebElement levelSelect = guestModalWindow.findElement(By.name("level_id"));
        Select select = new Select(levelSelect);
        WebElement selectedOption = select.getFirstSelectedOption();
        String level = selectedOption.getText();

        WebElement closeButton = guestModalWindow.findElement(By.cssSelector(".close"));
        waitForElementToBeClickableAndClick(closeButton, 10);

        try {
            waitForWebElementToDisappear(guestModalWindow, 1);
        } catch (Exception e) {
            System.out.println("try to close modal again");
            waitForElementToBeClickableAndClick(closeButton, 10);
            waitForWebElementToDisappear(guestModalWindow, 10);
        }
        return level;
    }

    private String findElementIfExists(WebElement webElement, By locator) {
        String text = "N/A";
        try {
            WebElement element = webElement.findElement(locator);
            text = element.getText();
        } catch (NoSuchElementException noSuchElementException) {
            System.out.println(format("Could not find %s", locator));
        }
        return text;
    }

    private int parseNumberOfSurfCourses(String text) {
        System.out.println("parse:");
        System.out.println(text);
        int parseNumberOfSurfCourses = 0;
        Pattern pattern = Pattern.compile("(\\d+)x");
        Matcher matcher = pattern.matcher(text);

        if (matcher.find()) {
            parseNumberOfSurfCourses = Integer.parseInt(matcher.group(1)); // Gruppe 1 ist die erste gefundene Gruppe in Klammern
            System.out.println("Gefundene Zahl: " + parseNumberOfSurfCourses);
        } else {
            System.out.println("Keine Zahl gefunden, die dem Muster entspricht.");
        }
        System.out.println(format("to be %d", parseNumberOfSurfCourses));
        return 0;
    }


    private void loginIfNeeded() {
        try {
            waitForAndGetWebElement(By.id("login-form"), 2);
            driver.findElement(By.id("email")).sendKeys(bookingLayerLoginEmail);
            driver.findElement(By.id("password")).sendKeys(bookingLayerLoginPassword);
            driver.findElement(By.id("submit-button")).click();
        } catch (Exception e) {
            System.out.println("Could not find login form. It is assumed we are already logged in");
        }
    }

    private static Path getLatestCSVFile() {
        System.out.println(FILE_PATH);
        Path dir = Paths.get(FILE_PATH);
        Optional<Path> lastFilePath = null;

        try {
            lastFilePath = Files.list(dir)
                    .filter(Files::isRegularFile)
                    .filter(p -> p.getFileName().toString().startsWith(BOOKINGLAYER_BOOKINGS))
                    .max(Comparator.comparingLong(file -> file.toFile().lastModified()));

            if (lastFilePath.isPresent()) {
                System.out.println("Das neueste File ist: " + lastFilePath.get());
            } else {
                System.out.println("Keine Files im Verzeichnis gefunden.");
            }
        } catch (IOException e) {
            System.err.println("Ein Fehler ist aufgetreten beim Lesen des Verzeichnisses: " + e.getMessage());
        }
        return lastFilePath.get();
    }

    private File getLatestCsvFileFrom(String filePath) {
        File dir = new File(filePath);
        File[] files = dir.listFiles();
        if (files == null || files.length == 0) {
            System.out.println("No files found in the directory.");
        }

        // Sortiere die Dateien nach dem letzten Ã„nderungsdatum
        Arrays.sort(files, (f1, f2) -> Long.compare(f2.lastModified(), f1.lastModified()));

        // Die neueste Datei ist nun das erste Element in der Liste
        File latestFile = files[0];
        System.out.println("The latest file is: " + latestFile.getName());
        return latestFile;
    }

    public void setUp() {

        HashMap<String, Object> chromePrefs = new HashMap<>();
        chromePrefs.put("profile.default_content_settings.popups", 0);
        chromePrefs.put("download.default_directory", FILE_PATH);
        chromePrefs.put("safebrowsing.enabled", "true");  // Optional: Sicherheitsfeatures von Chrome aktivieren

        ChromeOptions options = new ChromeOptions();
        options.setExperimentalOption("prefs", chromePrefs);
        options.addArguments("--headless");
        options.addArguments("--disable-gpu");
        options.addArguments("--window-size=1920,1080");
        driver = new ChromeDriver(options);

        js = (JavascriptExecutor) driver;
        vars = new HashMap<String, Object>();
    }


    private static void sleep(int timeout, String message) {
        try {
            System.out.printf("%s  - wait %d seconds ...%n", message, timeout / 1000);
            Thread.sleep(timeout);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public Path loginAndDownload() {
        login();

        WebElement downloadButton = waitForAndGetWebElement(By.cssSelector(".guczhc > svg"), 10);
        downloadButton.click();

        vars.put("window_handles", driver.getWindowHandles());
        driver.findElement(By.cssSelector(".hbQhqI:nth-child(1)")).click();
        Path downloadCsv = CSVFileWatcherService.waitForFileToBeWritten(FILE_PATH, BOOKINGLAYER_BOOKINGS);

        driver.close();
        return downloadCsv;
    }

    private WebElement waitForAndGetWebElement(By locator, int seconds) {
        WebDriverWait webDriverWait = new WebDriverWait(driver, ofSeconds(seconds));
        System.out.printf("webDriver wait until %s appears...%n", locator.toString());
        WebElement webElement = webDriverWait.until(ExpectedConditions.visibilityOfElementLocated(locator));
        return webElement;
    }
    private void waitForWebElementToDisappear(WebElement webElement, int seconds) {
        WebDriverWait webDriverWait = new WebDriverWait(driver, ofSeconds(seconds));
        System.out.printf("webDriver wait until %s dissappears...%n", webElement.getTagName());
        webDriverWait.until(ExpectedConditions.invisibilityOf(webElement));
    }

    private WebElement waitForAndGetWebElement(WebElement parentElement, By locator, int seconds) {
        WebDriverWait webDriverWait = new WebDriverWait(driver, ofSeconds(seconds));
        System.out.printf("webDriver wait until %s appears...%n", locator.toString());
        WebElement childElement = webDriverWait.until(ExpectedConditions.presenceOfNestedElementLocatedBy(parentElement, locator));
        return childElement;
    }

    private void waitForElementToBeClickableAndClick(WebElement webElement, int seconds) {
        WebDriverWait webDriverWait = new WebDriverWait(driver, ofSeconds(seconds));
        System.out.printf("webDriver waits until %s clickable...%n", webElement.getTagName());
        webDriverWait.until(ExpectedConditions.elementToBeClickable(webElement));
        webElement.click();
    }

    private void login() {
        driver.get("https://app.bookinglayer.io/login");
        driver.findElement(By.id("email")).sendKeys(bookingLayerLoginEmail);
        driver.findElement(By.id("password")).sendKeys(bookingLayerLoginPassword);
        driver.findElement(By.id("submit-button")).click();
    }

    public void waitForFileToBeWritten() {
        Path path = Paths.get(FILE_PATH);
        long lastModifiedTime = path.toFile().lastModified();
        long fileSize = path.toFile().length();

        while (true) {
            sleep(1000, "wait for file to be written ..");
            File file = path.toFile();

            if (file.lastModified() == lastModifiedTime && fileSize == file.length() && fileSize > 0) {
                System.out.println("File write has completed.");
                break;
            } else {
                lastModifiedTime = file.lastModified();
                fileSize = file.length();
            }
        }

        // Hier kÃ¶nnen Sie die Datei verarbeiten
        System.out.println("File is ready to be processed.");
    }

    public void tearDown() {
        driver.quit();
    }
}
